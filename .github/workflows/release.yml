name: Build/release

on:
  workflow_dispatch:
  workflow_call:
  push:
    paths-ignore:
      - '/*.sh'
      - '/.*'
      - '/_*'
      - '/vcpkg.txt'
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '**.nix'
      - 'flake.lock'
      - '.github/workflows/*.yml'
      - '!.github/workflows/release.yml'

jobs:
  release:
    runs-on: ${{ matrix.os }}

    # Platforms to build on/for
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        node-version: [16]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Prepare for app notarization (macOS)
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.APPLE_API_KEY }}' > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - name: Fetch Metanorma (macOS)
        if: startsWith(matrix.os, 'macos')
        continue-on-error: true
        run: |
          mkdir -p bin/mac && cd bin/mac && curl -fsSL "https://github.com/metanorma/packed-mn/releases/latest/download/metanorma-darwin-x64.tgz" -O && find . -name "*.tgz" -exec tar xzf {} \; && rm *.tgz && mv metanorma-darwin* metanorma

      - name: Fetch Metanorma (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        continue-on-error: true
        run: |
          mkdir -p bin/linux && cd bin/linux && curl -fsSL "https://github.com/metanorma/packed-mn/releases/latest/download/metanorma-linux-x64.tgz" -O && find . -name "*.tgz" -exec tar xzf {} \; && rm *.tgz && mv metanorma-linux* metanorma

      - name: Fetch Metanorma (Windows)
        if: startsWith(matrix.os, 'windows')
        continue-on-error: true
        run: |
          md bin/win && cd bin/win && curl.exe -L -o metanorma "https://github.com/metanorma/packed-mn/releases/latest/download/metanorma-windows-x64.exe"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      # See: https://github.com/pnpm/action-setup#use-cache-to-reduce-installation-time
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies

      - name: Build/release Electron app
        uses: njzydark/action-electron-builder-pnpm@v1.1.0-pnpm
        with:
          package_manager: "pnpm"

          # Compile before invoking electron-builder
          build_script_name: "all:build"

          # Run electron-builder inside core module directory
          app_root: "packages/core"

          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # macOS code signing certificate
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}

          # Windows code signing certificate
          windows_certs: ${{ secrets.windows_certs }}
          windows_certs_password: ${{ secrets.windows_certs_password }}

          max_attempts: 3

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          # release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          # macOS notarization API key
          API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}

  update-website:
    # If the commit is tagged with a version (e.g. "v1.0.0"),
    # that means a new release has been created.
    # Update the website to show new version.
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: [release]
    uses: ./.github/workflows/update-website.yml
